unit UMain;

interface

uses
    Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
    System.Classes, Vcl.Graphics,
    Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.ExtCtrls,
    FireDAC.Stan.Intf, FireDAC.Stan.Option, FireDAC.Stan.Error, FireDAC.UI.Intf,
    FireDAC.Phys.Intf, FireDAC.Stan.Def, FireDAC.Stan.Pool, FireDAC.Stan.Async,
    FireDAC.Phys, FireDAC.Phys.SQLite, FireDAC.Phys.SQLiteDef,
    FireDAC.Stan.ExprFuncs, FireDAC.Phys.SQLiteWrapper.Stat, FireDAC.VCLUI.Wait,
    FireDAC.Stan.Param, FireDAC.DatS, FireDAC.DApt.Intf, FireDAC.DApt, Data.DB,
    FireDAC.Comp.DataSet, FireDAC.Comp.Client, Vcl.Buttons, inifiles;

type
    TFMain = class(TForm)
        Button3: TButton;
        Button4: TButton;
        Edit1: TEdit;
        FDC: TFDConnection;
        Query1: TFDQuery;
        BitBtn1: TBitBtn;
        BitBtn2: TBitBtn;
        Button1: TButton;
        Edit2: TEdit;
        Label1: TLabel;
        procedure Button3Click(Sender: TObject);
        procedure Button4Click(Sender: TObject);
        procedure BitBtn1Click(Sender: TObject);
        procedure BitBtn2Click(Sender: TObject);
        procedure FormCreate(Sender: TObject);
        procedure FormDestroy(Sender: TObject);
        procedure Button1Click(Sender: TObject);
    private
        { Private declarations }
    public
        numdat: integer;
    end;

var
    FMain: TFMain;

implementation

{$R *.dfm}

uses UGraph;

const
    maxsensors = 20;

var
    NA: array [1 .. maxsensors] of TFGraph;
    i: integer;
    SensorName: array [1 .. maxsensors] of string;
    SensorEId: array [1 .. maxsensors] of string;

    {
      https://skachivaem.ru/articles/50-delphi/217--delphi.html
      procedure DrawGraph (f: TFunc; a: real; b: real; C: TCanvas);
      «аголовок функции. ѕараметры: f Ц функци€, график, которой будем троить.
      a Ц начальное значение переменной УxФ. b Ц конечное значение переменной УxФ.
      C Ц канва, на которой будем рисовать.
      очень приблизительно - 1 датчик в секунду 8 часов это 1 мегабайт 3 датчика - 1400000
      3 датчика вставл€лись три минуты
      с учетом траты времени на метку времеи 2-3-4 датчика займут места чуть меньше

    }
Type
    TFunc = function(x: real): real;

function getsecs: longint;
Var
    SystemTime: TSystemTime;
begin
    GetLocalTime(SystemTime);
    getsecs := SystemTime.wSecond + SystemTime.wMinute * 60 + SystemTime.wHour
      * 60 * 60;
end;

Procedure DrawGraphAllQ(Q: TFDQuery; F: string; C: TCanvas);
var
    x, y, cx, cy: integer;
    y0, x0, stepx, stepy: integer;
    v: real;
begin
    Q.First;

    stepx := 3;
    stepy := round(C.ClipRect.Bottom / 100);

    x0 := 0;
    y0 := C.ClipRect.Bottom;

    C.Brush.Color := clBlack;
    C.FillRect(Rect(0, 0, C.ClipRect.Right, C.ClipRect.Bottom));

    C.Pen.Color := clYellow;
    C.MoveTo(0, y0 - 80 * stepy);
    C.LineTo(C.ClipRect.Right, y0 - 80 * stepy);
    C.Pen.Color := clRed;
    C.MoveTo(0, y0 - 90 * stepy);
    C.LineTo(C.ClipRect.Right, y0 - 90 * stepy);

    C.Pen.Color := clGreen;
    C.MoveTo(0, y0);
    C.Pen.Width:=2;
    while not Q.Eof do
    begin
        C.Pen.Color := clGreen;
        cx := (Q.FieldByName('sec').Asinteger - 10000) * stepx;
        v := Q.FieldByName(F).AsFloat;
        cy := round(v * stepy);
        if v > 80 then
            C.Pen.Color := clYellow;
        if v > 90 then
            C.Pen.Color := clRed;

        C.LineTo(cx, y0 - cy);

        Q.Next;
    end;

end;

procedure DrawGraph(F: TFunc; a: real; b: real; C: TCanvas);
var
    x, y, h: real;
    max, min: real;
    sx, sy: real;
    xmid, ymid: integer;
begin
    sx := (C.ClipRect.Right) / (b - a);
    h := 1 / sx;
    xmid := C.ClipRect.Right div 2;
    ymid := C.ClipRect.Bottom div 2;
    x := a;
    max := F(x);
    min := max;
    while x <= b do
    begin
        y := F(x);
        if y < min then
            min := y;
        if y > max then
            max := y;
        x := x + h;
    end;
    sy := C.ClipRect.Bottom / (max - min);
    C.Brush.Color := clBlack;
    C.FillRect(Rect(0, 0, C.ClipRect.Right, C.ClipRect.Bottom));
    C.Pen.Color := clYellow;
    C.MoveTo(0, ymid);
    C.LineTo(C.ClipRect.Right, ymid);
    C.MoveTo(xmid, 0);
    C.LineTo(xmid, C.ClipRect.Bottom);
    x := a;
    y := F(x);
    C.Pen.Color := clWhite;
    C.MoveTo(xmid + round(sx * x), ymid - round(sy * y));
    while x <= b do
    begin
        y := F(x);
        C.LineTo(xmid + round(sx * x), ymid - round(sy * y));
        x := x + h;
    end;
end;

Function F(x: real): real;
Begin
    Result := sin(x);
End;

procedure TFMain.BitBtn1Click(Sender: TObject);
var
    ini: tinifile;
begin
    ini := tinifile.Create(Extractfilepath(Application.ExeName) + 'GRAPHS.INI');
    for i := 1 to numdat do
    begin
        NA[i] := TFGraph.Create(FGraph);
        NA[i].Parent := nil;
        NA[i].Left := ini.ReadInteger('FORM' + Inttostr(i), 'LEFT', i * 50);
        NA[i].Top := ini.ReadInteger('FORM' + Inttostr(i), 'TOP', i * 50);
        NA[i].Width := ini.ReadInteger('FORM' + Inttostr(i), 'WIDTH', i * 50);
        NA[i].Height := ini.ReadInteger('FORM' + Inttostr(i), 'HEIGHT', i * 50);
        SensorName[i] := ini.ReadString('FORM' + Inttostr(i), 'NAME',
          'NONAME_' + Inttostr(i));
        SensorEId[i] := ini.ReadString('FORM' + Inttostr(i), 'EId',
          'EId_' + Inttostr(i));
        NA[i].sname := SensorName[i];
        NA[i].eid := SensorEId[i];
        NA[i].num := i;
        NA[i].Caption := '√рафик сенсора ' + SensorName[i];
        NA[i].Show;
    end;
    ini.Free;
end;

procedure TFMain.BitBtn2Click(Sender: TObject);
begin
    for i := 1 to numdat do
    begin
        if (NA[i] <> nil) then
            NA[i].Close;
    end;
end;

function mfunc(t: longint): real;
begin
    mfunc := ({random}sin(t) * 50)+50;
end;

procedure TFMain.Button1Click(Sender: TObject);
begin
    // добавл€ем сенсор
    BitBtn2.Click;
    numdat := numdat + 1;
    SensorName[numdat]:= Edit2.Text;
    SensorEId[numdat]:= Edit2.Text;
    BitBtn1.Click;
end;

procedure TFMain.Button3Click(Sender: TObject);
var
    i, j: longint;
begin
    Randomize;
    Query1.SQL.Clear;
    Query1.SQL.add('delete from dat where 1=1');
    Query1.ExecSQL;
    Query1.SQL.Clear;
    Query1.SQL.add('VACUUM;');
    Query1.ExecSQL;
    Query1.SQL.Clear;
    Query1.SQL.add('PRAGMA synchronous = OFF');
    Query1.ExecSQL;
    Query1.SQL.Clear;
    Query1.SQL.add('PRAGMA temp_store = MEMORY');
    Query1.ExecSQL;
    Query1.SQL.Clear;
    Query1.SQL.add('INSERT INTO dat ( sec, dat, num, val )');
    Query1.SQL.add(' VALUES ( :sec, :dat, :num, :val)');
    for i := 10000 to 12000 do
    begin
        for j := 1 to numdat do
        begin
            Query1.ParamByName('sec').Asinteger := i; // getsecs;
            Query1.ParamByName('dat').AsString := Datetostr(Date);
            Query1.ParamByName('num').Asinteger := j;
            Query1.ParamByName('val').AsFloat := mfunc(i);
            Query1.ExecSQL;
        end;
        Edit1.Text := Inttostr(i);
        Application.ProcessMessages;
    end;

    ShowMessage('Done');
end;

procedure TFMain.Button4Click(Sender: TObject);
var
    i: integer;
begin
    Query1.SQL.Clear;
    Query1.SQL.add('select * from dat where num=:num limit 2000');
    for i := 1 to numdat do
    begin
        Query1.ParamByName('num').Asinteger := i;
        Query1.Open;
        // NA[1].image1.Picture.Graphic.Width:=NA[1].Width-8;
        // NA[1].image1.Picture.Graphic.Height:=NA[1].Height-73;
        DrawGraphAllQ(Query1, 'val', NA[i].Canvas);
        Query1.Close;
    end;

end;

procedure TFMain.FormCreate(Sender: TObject);
var
    ini: tinifile;
begin
    // INI
    ini := tinifile.Create(Extractfilepath(Application.ExeName) + 'GRAPHS.INI');
    numdat := ini.ReadInteger('MAIN', 'NUMDAT', 5);
    // INI

    FDC.Close;
    FDC.Params.Database := Extractfilepath(Application.ExeName) + 'base.sqlite';
    FDC.Open;
    Query1.SQL.Clear;
    Query1.SQL.add('CREATE TABLE IF NOT EXISTS dat ( ');
    Query1.SQL.add('   sec  BIGINT, ');
    Query1.SQL.add('   dat  Varchar(50), ');
    Query1.SQL.add('   num  integer, ');
    Query1.SQL.add('   val REAL)');
    Query1.ExecSQL;
    Query1.SQL.Clear;

    for i := 1 to maxsensors do
        NA[i] := nil;

    ini.Free;
end;

procedure TFMain.FormDestroy(Sender: TObject);
var
    ini: tinifile;
begin
    // INI
    ini := tinifile.Create(Extractfilepath(Application.ExeName) + 'GRAPHS.INI');
    ini.WriteInteger('MAIN', 'NUMDAT', numdat);
    // INI

    FDC.Close;
    ini.Free;
end;

end.
